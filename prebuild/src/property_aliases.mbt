// Copyright 2025 International Digital Economy Academy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

///|
/// Handle the property value aliases
/// 
/// Reference : https://www.unicode.org/reports/tr44/#General_Category_Values
async fn get_property_value_alises(
  defer_ : (() -> Unit) -> Unit
) -> Array[(String, String)] raise {
  // Get the case folding data from Unicode.org
  let request = @http.request(
    UNICODE_ADDRESS,
    path=UNICODE_DATABASE_PATH + "/PropertyValueAliases.txt",
  )
  let data = @http.fetch(request)
  defer_(() => data.drop())
  guard data.consume() is Ok(body)
  defer_(() => body.drop())
  guard body.stream() is Ok(input_stream)
  defer_(() => input_stream.drop())

  // We only handle general category
  let regexp = @regexp.compile(
    (
      #|^gc ; (?<category>[^\s;]+)[\s;]+(?<alias>[^\s;]+)(?:\s+;\s+(?<other_alias>[^\s;]+))?
    ),
  )
  let mappings = []
  while true {
    let next = @io.read_line(stream=input_stream)
    if next.contains("EOF") {
      break
    }
    let result = regexp.execute(next)
    if result.matched() {
      let groups = result.groups()
      let category = groups.get("category").unwrap().to_string()
      mappings.push((category, category))
      mappings.push((groups.get("alias").unwrap().to_string(), category))
      if groups.get("other_alias") is Some(other_alias) {
        mappings.push((other_alias.to_string(), category))
      }
    }
  }
  mappings
}

///|
/// Handle the property value aliases
/// 
/// Reference : https://www.unicode.org/reports/tr44/#General_Category_Values
async fn handle_property_value_aliases(
  defer_ : (() -> Unit) -> Unit
) -> Unit raise {
  let mappings = @promise.spawn(get_property_value_alises).await()
  // Print the mappings for debugging
  // Prepare file. Assume preopen is where the file needs to be written
  guard @preopens.get_directories() is [(preopen, _), ..] else {
    fail("Error: No preopen directories found")
  }
  let file = preopen
    .open_at(
      @fs.PathFlags::default(),
      "property_value_alises.mbt",
      @fs.OpenFlags::default().set(CREATE).set(TRUNCATE),
      @fs.DescriptorFlags::default().set(@fs.DescriptorFlagsFlag::WRITE),
    )
    .unwrap_or_error()
  defer_(() => file.drop())
  let output_stream = file.write_via_stream(0).unwrap_or_error()
  defer_(() => output_stream.drop())

  // Start writing template
  @io.println(
    (
      #|// generated by prebuild : just -d ./prebuild -f ./prebuild/justfile run
      #|
      #|///|
      #|pub let general_category_property_value_alises : Map[String, String] = {
    ),
    stream=output_stream,
  )
  for mapping in mappings {
    let (k, v) = mapping
    @io.println(
      (
        $|  "\{k}": "\{v}",
      ),
      stream=output_stream,
    )
  }
  @io.println(
    (
      #|}
    ),
    stream=output_stream,
  )
  output_stream.blocking_flush().unwrap()
}
