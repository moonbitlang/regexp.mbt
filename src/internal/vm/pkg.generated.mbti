// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/regexp/internal/vm"

// Values
fn case_insensitive_char_class(Array[Char]) -> Array[Char]

fn compute_char_class_complement(Array[Char]) -> Array[Char]

let ranges_any : Array[Char]

let ranges_any_not_new_line : Array[Char]

let ranges_is_digit : Array[Char]

let ranges_is_not_digit : Array[Char]

let ranges_is_not_white_space_or_line_terminator : Array[Char]

let ranges_is_not_word : Array[Char]

let ranges_is_white_space_or_line_terminator : Array[Char]

let ranges_is_word : Array[Char]

fn simplify_char_ranges(Array[Char]) -> Array[Char]

fn vm(Array[Instruction], StringView, Int, allow_exponentiaion? : Bool) -> Array[Int]

// Errors

// Types and methods
pub(all) enum Instruction {
  Matched
  Save(Int)
  Char(Array[Char])
  Jump(Int)
  Split(Int, Int)
  Assertion(Predicate)
  Backreference(Int)
}
impl ToJson for Instruction

pub(all) enum Predicate {
  BeginText
  EndText
  BeginLine
  EndLine
  WordBoundary
  NoWordBoundary
}
impl Show for Predicate
impl ToJson for Predicate

// Type aliases

// Traits

