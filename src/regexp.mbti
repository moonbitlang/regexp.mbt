package "moonbitlang/regexp"

import(
  "moonbitlang/core/string"
)

// Values
fn compile(@string.StringView, flags~ : @string.StringView = ..) -> Regexp raise RegexpError

// Types and methods
pub enum Err {
  InternalError
  InvalidCharClass
  InvalidEscape
  InvalidNamedCapture
  InvalidRepeatOp
  InvalidRepeatSize
  MissingBracket
  MissingParenthesis
  MissingRepeatArgument
  TrailingBackslash
  UnexpectedParenthesis
}
impl Show for Err

type MatchResult
fn MatchResult::group(Self, Int) -> @string.StringView?
fn MatchResult::group_by_name(Self, String) -> @string.StringView? raise
fn MatchResult::matched(Self) -> Bool
fn MatchResult::rest(Self) -> @string.StringView
fn MatchResult::results(Self) -> Iter[@string.StringView?]

type Regexp
fn Regexp::execute(Self, @string.StringView) -> MatchResult
fn Regexp::group_by_name(Self, String) -> Int?
fn Regexp::group_count(Self) -> Int
fn Regexp::group_names(Self) -> Iter[String]

pub suberror RegexpError {
  RegexpError(err~ : Err, source_fragment~ : @string.StringView)
}
impl Show for RegexpError

// Type aliases

// Traits

