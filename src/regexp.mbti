package "peter-jerry-ye/regexp"

import(
  "moonbitlang/core/string"
)

// Values
fn compile(@string.StringView) -> Engine raise Error_

// Types and methods
type Engine
fn Engine::execute(Self, @string.StringView) -> MatchResult
fn Engine::group_by_name(Self, String) -> Int?
fn Engine::group_count(Self) -> Int

pub enum Err {
  InternalError
  InvalidCharClass
  InvalidEscape
  InvalidNamedCapture
  InvalidRepeatOp
  InvalidRepeatSize
  MissingBracket
  MissingParenthesis
  MissingRepeatArgument
  TrailingBackslash
  UnexpectedParenthesis
}
impl Show for Err

pub suberror Error_ {
  Error_(err~ : Err, data~ : @string.StringView)
}
impl Show for Error_

type MatchResult
fn MatchResult::group(Self, Int) -> @string.StringView?
fn MatchResult::group_by_name(Self, String) -> @string.StringView? raise
fn MatchResult::matched(Self) -> Bool
fn MatchResult::results(Self) -> Iter[@string.StringView]

// Type aliases

// Traits

